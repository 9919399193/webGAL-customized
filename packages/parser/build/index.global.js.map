{"version":3,"file":"index.global.js","sources":["../interface/sceneInterface.ts","../scriptParser/commandParser.ts","../interface/assets.ts","../scriptParser/argsParser.ts","../scriptParser/contentParser.ts","../scriptParser/assetsScanner.ts","../scriptParser/subSceneScanner.ts","../scriptParser/scriptParser.ts","../sceneParser.ts","../index.ts"],"sourcesContent":["/**\n * 语句类型\n */\nimport { sceneEntry } from \"./runtimeInterface\";\nimport { fileType } from \"./assets\";\n\nexport enum commandType {\n  say, // 对话\n  changeBg, // 更改背景\n  changeFigure, // 更改立绘\n  bgm, // 更改背景音乐\n  video, // 播放视频\n  pixi, // pixi演出\n  pixiInit, // pixi初始化\n  intro, // 黑屏文字演示\n  miniAvatar, // 小头像\n  changeScene, // 切换场景\n  choose, // 分支选择\n  end, // 结束游戏\n  setComplexAnimation, // 动画演出\n  setFilter, // 设置效果\n  label, // 标签\n  jumpLabel, // 跳转标签\n  chooseLabel, // 选择标签\n  setVar, // 设置变量\n  if, // 条件跳转\n  callScene, // 调用场景\n  showVars,\n  unlockCg,\n  unlockBgm,\n  filmMode,\n  setTextbox,\n  setAnimation,\n  playEffect\n}\n\n/**\n * 单个参数接口\n * @interface arg\n */\nexport interface arg {\n  key: string; // 参数键\n  value: string | boolean | number; // 参数值\n}\n\n/**\n * 资源接口\n * @interface IAsset\n */\nexport interface IAsset {\n  name: string; // 资源名称\n  type: fileType; // 资源类型\n  url: string; // 资源url\n  lineNumber: number; // 触发资源语句的行号\n}\n\n/**\n * 单条语句接口\n * @interface ISentence\n */\nexport interface ISentence {\n  command: commandType; // 语句类型\n  commandRaw: string; // 命令的原始内容，方便调试\n  content: string; // 语句内容\n  args: Array<arg>; // 参数列表\n  sentenceAssets: Array<IAsset>; // 语句携带的资源列表\n  subScene: Array<string>; // 语句包含子场景列表\n}\n\n/**\n * 场景接口\n * @interface IScene\n */\nexport interface IScene {\n  sceneName: string; // 场景名称\n  sceneUrl: string; // 场景url\n  sentenceList: Array<ISentence>; // 语句列表\n  assetsList: Array<IAsset>; // 资源列表\n  subSceneList: Array<string>; // 子场景的url列表\n}\n\n/**\n * 当前的场景数据\n * @interface ISceneData\n */\nexport interface ISceneData {\n  currentSentenceId: number; // 当前语句ID\n  sceneStack: Array<sceneEntry>; // 场景栈\n  currentScene: IScene; // 当前场景数据\n}\n\n/**\n * 处理后的命令接口\n * @interface parsedCommand\n */\nexport interface parsedCommand {\n  type: commandType;\n  additionalArgs: Array<arg>;\n}\n","import { commandType, parsedCommand } from \"../interface/sceneInterface\";\n\n/**\n * 处理命令\n * @param commandRaw\n * @param ADD_NEXT_ARG_LIST\n * @param SCRIPT_CONFIG\n * @return {parsedCommand} 处理后的命令\n */\nexport const commandParser = (commandRaw: string, ADD_NEXT_ARG_LIST:any, SCRIPT_CONFIG:any): parsedCommand => {\n  let returnCommand: parsedCommand = {\n    type: commandType.say, // 默认是say\n    additionalArgs: []\n  };\n  // 开始处理命令内容\n  const type: commandType = getCommandType(commandRaw, ADD_NEXT_ARG_LIST, SCRIPT_CONFIG);\n  returnCommand.type = type;\n  // 如果是对话，加上额外的参数\n  if (type === commandType.say) {\n    returnCommand.additionalArgs.push({\n      key: \"speaker\",\n      value: commandRaw\n    });\n  }\n  returnCommand = addNextArg(returnCommand, type, ADD_NEXT_ARG_LIST);\n  return returnCommand;\n};\n\n/**\n * 根据command原始值判断是什么命令\n * @param command command原始值\n * @param ADD_NEXT_ARG_LIST\n * @param SCRIPT_CONFIG\n * @return {commandType} 得到的command类型\n */\nfunction getCommandType(command: string, ADD_NEXT_ARG_LIST:any, SCRIPT_CONFIG:any): commandType {\n  // if (command.match(/if/)) {\n  //   return commandType.if;\n  // }\n  const commandMap = new Map();\n  SCRIPT_CONFIG.forEach((e:any) => {\n    commandMap.set(e.scriptString, e.scriptType);\n  });\n  if (commandMap.has(command)) {\n    return commandMap.get(command);\n  } else return commandType.say;\n}\n\nfunction addNextArg(commandToParse: parsedCommand, thisCommandType: commandType, ADD_NEXT_ARG_LIST:any) {\n  if (ADD_NEXT_ARG_LIST.includes(thisCommandType)) {\n    commandToParse.additionalArgs.push({\n      key: \"next\",\n      value: true\n    });\n  }\n  return commandToParse;\n}\n","/**\n * 内置资源类型的枚举\n */\nexport enum fileType {\n  background,\n  bgm,\n  figure,\n  scene,\n  tex,\n  vocal,\n  video,\n}\n","import { arg } from \"../interface/sceneInterface\";\nimport { fileType } from \"../interface/assets\";\n/**\n * 参数解析器\n * @param argsRaw 原始参数字符串\n * @param assetSetter\n * @return {Array<arg>} 解析后的参数列表\n */\nexport function argsParser(argsRaw: string, assetSetter: (fileName: string, assetType: fileType) => string): Array<arg> {\n  const returnArrayList: Array<arg> = [];\n  // 处理参数\n  // 不要去空格\n  let newArgsRaw = argsRaw.replace(/ /g, \" \");\n  // 分割参数列表\n  let rawArgsList: Array<string> = newArgsRaw.split(\" -\");\n  // 去除空字符串\n  rawArgsList = rawArgsList.filter((e) => {\n    return e !== \"\";\n  });\n  rawArgsList.forEach((e) => {\n    const argName = e.split(\"=\")[0];\n    const argValue = e.split(\"=\")[1];\n    // 判断是不是语音参数\n    if (e.match(/.ogg|.mp3|.wav/)) {\n      returnArrayList.push({\n        key: \"vocal\",\n        value: assetSetter(e, fileType.vocal)\n      });\n    } else {\n      // 判断是不是省略参数\n      if (argValue === undefined) {\n        returnArrayList.push({\n          key: argName,\n          value: true\n        });\n      } else {\n        // 是字符串描述的布尔值\n        if (argValue === \"true\" || argValue === \"false\") {\n          returnArrayList.push({\n            key: argName,\n            value: argValue === \"true\"\n          });\n        } else {\n          // 是数字\n          if (!isNaN(Number(argValue))) {\n            returnArrayList.push({\n              key: argName,\n              value: Number(argValue)\n            });\n          } else {\n            // 是普通参数\n            returnArrayList.push({\n              key: argName,\n              value: argValue\n            });\n          }\n        }\n      }\n    }\n  });\n  return returnArrayList;\n};\n","import { commandType } from \"../interface/sceneInterface\";\nimport { fileType } from \"../interface/assets\";\n\n/**\n * 解析语句内容的函数，主要作用是把文件名改为绝对地址或相对地址（根据使用情况而定）\n * @param contentRaw 原始语句内容\n * @param type 语句类型\n * @param assetSetter\n * @return {string} 解析后的语句内容\n */\nexport const contentParser = (contentRaw: string, type: commandType, assetSetter:any) => {\n  if (contentRaw === \"none\" || contentRaw === \"\") {\n    return \"\";\n  }\n  switch (type) {\n    case commandType.playEffect:\n      return assetSetter(contentRaw, fileType.vocal);\n    case commandType.changeBg:\n      return assetSetter(contentRaw, fileType.background);\n    case commandType.changeFigure:\n      return assetSetter(contentRaw, fileType.figure);\n    case commandType.bgm:\n      return assetSetter(contentRaw, fileType.bgm);\n    case commandType.callScene:\n      return assetSetter(contentRaw, fileType.scene);\n    case commandType.changeScene:\n      return assetSetter(contentRaw, fileType.scene);\n    case commandType.miniAvatar:\n      return assetSetter(contentRaw, fileType.figure);\n    case commandType.video:\n      return assetSetter(contentRaw, fileType.video);\n    case commandType.choose:\n      return getChooseContent(contentRaw, assetSetter);\n    case commandType.unlockBgm:\n      return assetSetter(contentRaw, fileType.bgm);\n    case commandType.unlockCg:\n      return assetSetter(contentRaw, fileType.background);\n    default:\n      return contentRaw;\n  }\n};\n\nfunction getChooseContent(contentRaw: string, assetSetter:any): string {\n  const chooseList = contentRaw.split(\"|\");\n  const chooseKeyList:Array<string> = [];\n  const chooseValueList:Array<string> = [];\n  for (const e of chooseList) {\n    chooseKeyList.push(e.split(\":\")[0]);\n    chooseValueList.push(e.split(\":\")[1]);\n  }\n  const parsedChooseList = chooseValueList.map((e) => {\n    if (e.match(/\\./)) {\n      return assetSetter(e, fileType.scene);\n    } else {\n      return e;\n    }\n  });\n  let ret = \"\";\n  for (let i = 0; i < chooseKeyList.length; i++) {\n    if (i !== 0) {\n      ret = ret + \"|\";\n    }\n    ret = ret + `${chooseKeyList[i]}:${parsedChooseList[i]}`;\n  }\n  return ret;\n}\n","import { arg, commandType, IAsset } from '../interface/sceneInterface';\nimport { fileType } from '../interface/assets';\n\n/**\n * 根据语句类型、语句内容、参数列表，扫描该语句可能携带的资源\n * @param command 语句类型\n * @param content 语句内容\n * @param args 参数列表\n * @return {Array<IAsset>} 语句携带的参数列表\n */\nexport const assetsScanner = (command: commandType, content: string, args: Array<arg>): Array<IAsset> => {\n  let hasVocalArg = false;\n  const returnAssetsList: Array<IAsset> = [];\n  if (command === commandType.say) {\n    args.forEach((e) => {\n      if (e.key === 'vocal') {\n        hasVocalArg = true;\n        returnAssetsList.push({\n          name: e.value as string,\n          url: e.value as string,\n          lineNumber: 0,\n          type: fileType.vocal,\n        });\n      }\n    });\n  }\n  if (content === 'none' || content === '') {\n    return returnAssetsList;\n  }\n  // 处理语句携带的资源\n  if (command === commandType.changeBg) {\n    returnAssetsList.push({\n      name: content,\n      url: content,\n      lineNumber: 0,\n      type: fileType.background,\n    });\n  }\n  if (command === commandType.changeFigure) {\n    returnAssetsList.push({\n      name: content,\n      url: content,\n      lineNumber: 0,\n      type: fileType.figure,\n    });\n  }\n  if (command === commandType.miniAvatar) {\n    returnAssetsList.push({\n      name: content,\n      url: content,\n      lineNumber: 0,\n      type: fileType.figure,\n    });\n  }\n  if (command === commandType.video) {\n    returnAssetsList.push({\n      name: content,\n      url: content,\n      lineNumber: 0,\n      type: fileType.video,\n    });\n  }\n  if (command === commandType.bgm) {\n    returnAssetsList.push({\n      name: content,\n      url: content,\n      lineNumber: 0,\n      type: fileType.bgm,\n    });\n  }\n  return returnAssetsList;\n};\n","/**\n * 扫描子场景\n * @param content 语句内容\n * @return {Array<string>} 子场景列表\n */\nimport { commandType } from '../interface/sceneInterface';\n\nexport const subSceneScanner = (command: commandType, content: string): Array<string> => {\n  const subSceneList: Array<string> = [];\n  if (command === commandType.changeScene || command === commandType.callScene) {\n    subSceneList.push(content);\n  }\n  if (command === commandType.choose) {\n    const chooseList = content.split('|');\n    const chooseValue = chooseList.map((e) => e.split(':')[1]);\n    chooseValue.forEach((e) => {\n      if (e.match(/\\./)) {\n        subSceneList.push(e);\n      }\n    });\n  }\n  return subSceneList;\n};\n","import { arg, commandType, IAsset, ISentence, parsedCommand } from \"../interface/sceneInterface\";\nimport { commandParser } from \"./commandParser\";\nimport { argsParser } from \"./argsParser\";\nimport { contentParser } from \"./contentParser\";\nimport { assetsScanner } from \"./assetsScanner\";\nimport { subSceneScanner } from \"./subSceneScanner\";\n\n/**\n * 语句解析器\n * @param sentenceRaw 原始语句\n * @param assetSetter\n * @param ADD_NEXT_ARG_LIST\n * @param SCRIPT_CONFIG\n */\nexport const scriptParser = (sentenceRaw: string, assetSetter:any, ADD_NEXT_ARG_LIST:any, SCRIPT_CONFIG:any): ISentence => {\n  let command: commandType; // 默认为对话\n  let content: string; // 语句内容\n  let subScene: Array<string>; // 语句携带的子场景（可能没有）\n  const args: Array<arg> = []; // 语句参数列表\n  let sentenceAssets: Array<IAsset>; // 语句携带的资源列表\n  let parsedCommand: parsedCommand; // 解析后的命令\n  let commandRaw: string;\n\n  // 正式开始解析\n\n  // 去分号，前面已做，这里不再需要\n  let newSentenceRaw = sentenceRaw;\n  // 截取命令\n  const getCommandResult = /:/.exec(newSentenceRaw);\n  /**\n   * 拆分命令和语句，同时处理连续对话。\n   */\n  // 没有command，说明这是一条连续对话或单条语句\n  if (getCommandResult === null) {\n    commandRaw = newSentenceRaw;\n    parsedCommand = commandParser(commandRaw, ADD_NEXT_ARG_LIST, SCRIPT_CONFIG);\n    command = parsedCommand.type;\n    for (const e of parsedCommand.additionalArgs) {\n      // 由于是连续对话，所以我们去除 speaker 参数。\n      if (command === commandType.say && e.key === \"speaker\") {\n        continue;\n      }\n      args.push(e);\n    }\n  } else {\n    commandRaw = newSentenceRaw.substring(0, getCommandResult.index);\n    // 划分命令区域和content区域\n    newSentenceRaw = newSentenceRaw.substring(getCommandResult.index + 1, newSentenceRaw.length);\n    parsedCommand = commandParser(commandRaw, ADD_NEXT_ARG_LIST, SCRIPT_CONFIG);\n    command = parsedCommand.type;\n    for (const e of parsedCommand.additionalArgs) {\n      args.push(e);\n    }\n  }\n  // 截取参数区域\n  const getArgsResult = / -/.exec(newSentenceRaw);\n  // 获取到参数\n  if (getArgsResult) {\n    const argsRaw = newSentenceRaw.substring(getArgsResult.index, sentenceRaw.length);\n    newSentenceRaw = newSentenceRaw.substring(0, getArgsResult.index);\n    for (const e of argsParser(argsRaw, assetSetter)) {\n      args.push(e);\n    }\n  }\n  content = contentParser(newSentenceRaw, command, assetSetter); // 将语句内容里的文件名转为相对或绝对路径\n  sentenceAssets = assetsScanner(command, content, args); // 扫描语句携带资源\n  subScene = subSceneScanner(command, content); // 扫描语句携带子场景\n  return {\n    command: command, // 语句类型\n    commandRaw: commandRaw, // 命令原始内容，方便调试\n    content: content, // 语句内容\n    args: args, // 参数列表\n    sentenceAssets: sentenceAssets, // 语句携带的资源列表\n    subScene: subScene // 语句携带的子场景\n  };\n};\n","import { IAsset, IScene, ISentence } from \"./interface/sceneInterface\";\nimport { scriptParser } from \"./scriptParser/scriptParser\";\nimport * as __ from \"lodash\";\nimport { fileType } from \"./interface/assets\";\n\n/**\n * 场景解析器\n * @param rawScene 原始场景\n * @param sceneName 场景名称\n * @param sceneUrl 场景url\n * @param assetsPrefetcher\n * @param assetSetter\n * @param ADD_NEXT_ARG_LIST\n * @param SCRIPT_CONFIG\n * @return {IScene} 解析后的场景\n */\nexport const sceneParser = (rawScene: string, sceneName: string, sceneUrl: string\n  , assetsPrefetcher: ((assetList: Array<IAsset>) => void), assetSetter: (fileName: string, assetType: fileType) => string\n  , ADD_NEXT_ARG_LIST:any, SCRIPT_CONFIG:any): IScene => {\n  const rawSentenceList = rawScene.split(\"\\n\"); // 原始句子列表\n  // 去除冒号后的内容\n  // 去除分号后的内容\n  const rawSentenceListWithoutEmpty = rawSentenceList\n    .map((sentence) => sentence.split(\";\")[0])\n    .filter((sentence) => sentence.trim() !== \"\");\n  let assetsList: Array<IAsset> = []; // 场景资源列表\n  let subSceneList: Array<string> = []; // 子场景列表\n  const sentenceList: Array<ISentence> = rawSentenceListWithoutEmpty.map((sentence) => {\n    const returnSentence: ISentence = scriptParser(sentence, assetSetter, ADD_NEXT_ARG_LIST, SCRIPT_CONFIG);\n    // 在这里解析出语句可能携带的资源和场景，合并到 assetsList 和 subSceneList\n    assetsList = [...assetsList, ...returnSentence.sentenceAssets];\n    subSceneList = [...subSceneList, ...returnSentence.subScene];\n    return returnSentence;\n  });\n\n  // 开始资源的预加载\n  assetsList = __.uniqWith(assetsList); // 去重\n  assetsPrefetcher(assetsList);\n\n  return {\n    sceneName: sceneName, // 场景名称\n    sceneUrl: sceneUrl,\n    sentenceList: sentenceList, // 语句列表\n    assetsList: assetsList, // 资源列表\n    subSceneList: subSceneList // 子场景列表\n  };\n};\n","import { commandType, IAsset } from \"./interface/sceneInterface\";\nimport { fileType } from \"./interface/assets\";\nimport { sceneParser } from \"./sceneParser\";\n\nexport default class SceneParser {\n\n  private readonly assetsPrefetcher;\n  private readonly assetSetter;\n  private readonly ADD_NEXT_ARG_LIST;\n  private readonly SCRIPT_CONFIG;\n\n  constructor(assetsPrefetcher: ((assetList: Array<IAsset>) => void),\n              assetSetter: (fileName: string, assetType: fileType) => string,\n              ADD_NEXT_ARG_LIST: Array<commandType>, SCRIPT_CONFIG: Array<any>) {\n    this.assetsPrefetcher = assetsPrefetcher;\n    this.assetSetter = assetSetter;\n    this.ADD_NEXT_ARG_LIST = ADD_NEXT_ARG_LIST;\n    this.SCRIPT_CONFIG = SCRIPT_CONFIG;\n  }\n\n  parse(rawScene: string, sceneName: string, sceneUrl: string\n  ) {\n    return sceneParser(rawScene, sceneName, sceneUrl, this.assetsPrefetcher, this.assetSetter, this.ADD_NEXT_ARG_LIST, this.SCRIPT_CONFIG);\n  }\n}\n"],"names":["__"],"mappings":"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"}